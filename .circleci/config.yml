version: 2.1

branch-filter-settings:
  develop-filters: &develop_filters
    branches:
      only:
        - main

executors:
  openjdk:
    docker:
      - image: 'cimg/openjdk:21.0'
  container-check:
    docker:
      - image: 'aquasec/trivy:0.59.1'

commands:
  unit_test:
    steps:
      - run:
          name: Unit Test & Output Coverage Report
          command: mvn clean test
      - store_artifacts:
          path: ./target/site/jacoco
          destination: jacoco
      ### ToDo: カバレッジの閾値チェックのコマンドを追加したい
  check_bugs:
    steps:
      - run:
          ### ToDo: CheckStyleのレポート生成だけでなく、エラーチェックも行いたい (現状、できていない)
          name: Check Bugs
          command: mvn spotbugs:check
      - store_artifacts:
          path: ./target/spotbugs.html
          destination: spotbugs
  check_style:
    steps:
      - run:
          ### ToDo: CheckStyleのレポート生成だけでなく、エラーチェックも行いたい
          name: Reporting Style Check
          command: mvn clean checkstyle:checkstyle
      - store_artifacts:
          path: ./target
          destination: checkstyle
  dockerfile_analyze:
    steps:
      - run:
          name: Dockerfile Lint
          command: |
            trivy config ./build/Dockerfile \
              --exit-code 1 \
              --config ./build/trivy-scan-dockerfile.yaml
      - store_artifacts:
          path: ./trivy-dockerfile-report.json
          destination: trivy
  image_tag_setting:
    steps:
      - run:
          name: Set Image Tag
          command: |
            IMAGE_TAG=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" ./pom.xml)
            echo "export IMAGE_TAG=${IMAGE_TAG}" >> $BASH_ENV
  image_build:
    steps:
      - run:
          name: Image Build
          command: |
            mvn clean package docker:build \
              -DskipTests=True \
              -DgoogleCloudRegion=${GCP_REGION} \
              -DgoogleCloudProjectId=${GCP_PROJECT}
      - run:
          name: Save Image as Tar
          command: |
            mkdir -p images
            echo "Image Tag: ${IMAGE_TAG}"
            docker image save -o \
              "images/sample-springboot-cloudrun_helloworld:${IMAGE_TAG}" \
              "${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/sample-springboot-cloudrun/helloworld:${IMAGE_TAG}"
      - persist_to_workspace:
          root: .
          paths:
            - images
  image_scan:
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Load Image from Tar
          command: |
            echo "Image Tag: ${IMAGE_TAG}"
            docker image load -i "images/sample-springboot-cloudrun_helloworld:${IMAGE_TAG}"
      - run:
          name: Image Scan
          command: |
            docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:0.59.1 image \
              --exit-code 1 \
              --config ./build/trivy-scan-image.yaml \
              ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/sample-springboot-cloudrun/helloworld:${IMAGE_TAG}
      - store_artifacts:
          path: ./trivy-image-report.json
          destination: trivy
  gcloud_setting:
    steps:
      - run:
          name: Install Gcloud Command & Authorize Google Cloud
          command: |
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            sudo apt-get -y update && sudo apt-get -y install google-cloud-cli
            echo ${GCP_SERVICE_ACCOUNT_KEY} | base64 -d | gcloud auth activate-service-account --key-file=-
  image_push:
    steps:
      - run:
          name: Configure Authentication
          command: gcloud auth configure-docker ${GCP_REGION}-docker.pkg.dev --quiet
      - run:
          name: Image Push
          command: |
            mvn docker:push \
              -DgoogleCloudRegion=${GCP_REGION} \
              -DgoogleCloudProjectId=${GCP_PROJECT}
  cloudrun_deploy:
    steps:
      - run:
          name: Set Variables
          command: |
            IMAGE_TAG=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            TIME=$(TZ=Asia/Tokyo date +"%Y%m%d-%H%M%S")
            echo "export IMAGE_TAG=${IMAGE_TAG}" >> $BASH_ENV
            echo "export TIME=${TIME}" >> $BASH_ENV
      - run:
          name: Apply Cloud Deploy release
          command: |
            gcloud deploy releases create rel-${TIME} \
              --project=${GCP_PROJECT} \
              --region=${GCP_REGION} \
              --annotations=imageTag=${IMAGE_TAG} \
              --delivery-pipeline=sample-springboot-cloudrun-deployment \
              --images=sample-springboot-cloudrun-image=${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/sample-springboot-cloudrun/helloworld:${IMAGE_TAG} \
              --source ./deploy

jobs:
  unit_test:
    executor: openjdk
    steps:
      - checkout
      - unit_test
  static_analyze:
    executor: openjdk
    steps:
      - checkout
      - check_bugs
      - check_style
  dockerfile_analyze:
    executor: container-check
    steps:
      - checkout
      - dockerfile_analyze
  image_build:
    executor: openjdk
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - image_tag_setting
      - image_build
  image_scan:
    executor: container-check
    steps:
      - checkout
      - image_tag_setting
      - image_scan
  # ToDo: image_pushは未完成
  image_push:
    executor: openjdk
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - gcloud_setting
      - image_push
  deploy:
    executor: openjdk
    steps:
      - checkout
      - gcloud_setting
      - cloudrun_deploy

workflows:
  main:
    jobs:
      - unit_test
      - static_analyze
      - dockerfile_analyze
      - image_build:
          requires:
            - unit_test
            - static_analyze
            - dockerfile_analyze
          context:
            - GoogleCloud
      - image_scan:
          requires:
            - image_build
          context:
            - GoogleCloud
      - image_push:
          filters: *develop_filters
          requires:
            - image_scan
          context:
            - GoogleCloud
      - deploy:
          requires:
            - image_push
          context:
            - GoogleCloud
